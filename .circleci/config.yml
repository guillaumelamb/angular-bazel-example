# This file configures the build at https://circleci.com/gh/alexeagle/angular-bazel-example
# Complete documentation is at https://circleci.com/docs/2.0/

# CircleCI lets us pick the key for storing one or more caches, to speed up subsequent builds.
# We can use this to avoid re-fetching our dependencies from npm on every build.
# To ensure we don't load a stale cache, we invalidate it based on the entries in the key:
# - the checksum of Yarn's lock file
# - the branch we are on, which really shouldn't be needed since the yarn lock file should be hermetic
# - the docker image tag, working around an issue we saw where changing docker images causes permission
#   errors when restoring the cache, like when the user we run as changes
var_1: &cache_key angular-{{ .Branch }}-{{ checksum "yarn.lock" }}-0.8.0

# Each job will inherit these defaults
var_2: &job_defaults
  working_directory: ~/ng
  docker:
    # Use the -browsers version just to get the right .so files on the disk
    # We'll actually download a chromium version under the rules_webtesting
    - image: circleci/node:10.12-browsers

# After checkout, rebase on top of master, because we want to test the proposed merge of a
# onto the target branch, not just test what's on the user's fork.
# Similar to travis behavior, but not quite the same.
# See https://discuss.circleci.com/t/1662
var_3: &post_checkout
  post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Opt-in to the new goodness
version: 2

# These jobs will run in parallel, and report separate statuses to GitHub PRs
jobs:
  lint:
    docker:
      - image: circleci/node:10.12
    steps:
      - checkout:
          <<: *post_checkout

      - restore_cache:
          key: *cache_key

      # Install Bazel
      - run: yarn install

      # Run the Buildifier to check our Bazel rules for format issues.
      - run: 'yarn bazel:format --mode=check ||
              (echo "BUILD files not formatted. Please run ''yarn bazel:format --mode=fix''" ; exit 1)'

      # Run the Buildifier to check our Bazel rules for lint issues.
      # Note: The `--lint=warn` will auto fixe (re-write) the affected files. 
      - run: 'yarn bazel:format --lint=warn ||
              (echo "BUILD files contain unresolved lint errors. Please fix manually the remaining errors." ; exit 1)'

  build:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - checkout:
          <<: *post_checkout

      - restore_cache:
          key: *cache_key

      - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc

      # Install Bazel from NPM
      - run: yarn

      # Build and Test
      - run: yarn ng test
      - run: yarn ng e2e

      # Also run prodserver test which is not covered by `ng e2e`
      - run: yarn bazel test //e2e:prodserver_test

      - store_artifacts:
          path: dist/bin/src/bundle.min.js
          destination: bundle.min.js

      - store_artifacts:
          path: dist/bin/src/bundle.cs.min
          destination: bundle.cs.min

  benchmark:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - checkout:
          <<: *post_checkout

      - restore_cache:
          key: *cache_key

      # Install Bazel/ibazel from NPM
      - run: yarn

      # Run `bazel build` first as a temporary workaround to unexpected
      # benchmark failure when entire build runs withing ibazel-benchmark-runner
      # ```
      # Error running Bazel unexpected EOF
      # [ibazel-benchmark-runner] iBazel process exited unexpectedly 4 null
      # error Command failed with exit code 1.
      # ```
      # TODO(gregmagolan): remove this once issue is resolved
      - run: ./node_modules/.bin/bazel build ...

      # Run the benchmark
      - run: yarn benchmark

      # If we get this far, save the node_modules directory for use next time.
      - save_cache:
          key: *cache_key
          paths:
            - "node_modules"

workflows:
  version: 2
  default_workflow:
    jobs:
      - lint
      - build
      - benchmark
